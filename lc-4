class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n = nums.size();
        if (n == 0){
            return {};
        }
        sort(nums.begin(), nums.end());
        vector<int> lisLength(n, 1), prevIndex(n, -1);
        int maxLen = 0, index = -1;
        for (int i = 0; i < n; ++i){
            for (int j = 0; j < i; ++j){
                if (nums[i] % nums[j] == 0 && lisLength[i] < lisLength[j] + 1){
                    lisLength[i] = lisLength[j] + 1;
                    prevIndex[i] = j;
                }
            }
            if (lisLength[i] > maxLen){
                maxLen = lisLength[i];
                index = i;
            }
        }
        vector<int> result;
        while (index != -1){
            result.push_back(nums[index]);
            index = prevIndex[index];
        }
        return result;
    }
};
